/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module":3,"statements":4,"EOF":5,"st":6,";":7,"NL":8,"statements_inner":9,"trailing_statement":10,"leading_statements":11,"leading_statement":12,"block_statement":13,"inline_statement":14,"while_statement":15,"unconditional_loop_statement":16,"conditional_loop_statement":17,"foreach_statement":18,"if_statement":19,"function_definition":20,"exp":21,"YIELD":22,"block":23,"{":24,"}":25,"WHILE":26,"LOOP":27,"FOREACH":28,"foreach_iterator":29,"IN":30,"IDENT":31,",":32,"IF":33,"else_ifs":34,"else":35,"else_if":36,"ELSE":37,"DEF":38,"function_name":39,"function_params":40,"PUNCTUATED_IDENT":41,"(":42,")":43,"function_params_list":44,"function_param":45,"=":46,"literal":47,"return_statement":48,"RETURN":49,"+":50,"-":51,"<<":52,">>":53,"<":54,"<=":55,">":56,">=":57,"==":58,"!=":59,"&":60,"*":61,"/":62,"%":63,"**":64,"^":65,"|":66,"&&":67,"||":68,"primary":69,"atom":70,"lambda":71,"WAIT":72,"GLOBAL_IDENT":73,"$":74,"TRACE":75,"COLOR":76,"NAMED_COLOR":77,"BINARY":78,"HEX":79,"FLOAT":80,"INTEGER":81,"TRUE":82,"FALSE":83,"STRING":84,".{":85,"lambda_args":86,"lambda_args_list":87,"call":88,"call_args_list":89,"call_without_paren":90,"call_without_paren_args":91,"wop_exp":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",8:"NL",22:"YIELD",24:"{",25:"}",26:"WHILE",27:"LOOP",28:"FOREACH",30:"IN",31:"IDENT",32:",",33:"IF",37:"ELSE",38:"DEF",41:"PUNCTUATED_IDENT",42:"(",43:")",46:"=",49:"RETURN",50:"+",51:"-",52:"<<",53:">>",54:"<",55:"<=",56:">",57:">=",58:"==",59:"!=",60:"&",61:"*",62:"/",63:"%",64:"**",65:"^",66:"|",67:"&&",68:"||",72:"WAIT",73:"GLOBAL_IDENT",74:"$",75:"TRACE",76:"COLOR",77:"NAMED_COLOR",78:"BINARY",79:"HEX",80:"FLOAT",81:"INTEGER",82:"TRUE",83:"FALSE",84:"STRING",85:".{"},
productions_: [0,[3,2],[6,1],[6,1],[4,1],[4,2],[9,1],[9,1],[9,2],[11,1],[11,2],[12,2],[12,2],[10,1],[10,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[14,1],[14,1],[23,3],[15,4],[16,3],[17,5],[18,6],[29,3],[29,1],[19,6],[34,1],[34,2],[36,4],[35,3],[20,5],[20,4],[39,1],[39,1],[40,2],[40,3],[44,1],[44,3],[45,3],[45,1],[48,2],[48,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[69,1],[69,1],[69,2],[69,3],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[71,4],[71,3],[86,2],[87,1],[87,3],[88,4],[89,1],[89,3],[90,2],[91,1],[91,3],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4: this.$ = []; 
break;
case 5: this.$ = $$[$0]; 
break;
case 6: this.$ = [$$[$0]]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 9: this.$ = [$$[$0]]; 
break;
case 10: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 11: this.$ = $$[$0-1]; 
break;
case 12: this.$ = $$[$0-1]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 24: this.$ = [A.WHILE, $$[$0-2], $$[$0]]; 
break;
case 25: this.$ = [A.LOOP, true, $$[$0]]; 
break;
case 26: this.$ = [A.LOOP, $$[$0-2], $$[$0]]; 
break;
case 45: this.$ = [T.RETURN, $$[$0]]; 
break;
case 46: this.$ = [T.RETURN]; 
break;
case 47: this.$ = [T.BIN_OP, '+', $$[$0-2], $$[$0]]; 
break;
case 48: this.$ = [T.BIN_OP, '-', $$[$0-2], $$[$0]]; 
break;
case 49: this.$ = [T.BIN_OP, '<<', $$[$0-2], $$[$0]]; 
break;
case 50: this.$ = [T.BIN_OP, '>>', $$[$0-2], $$[$0]]; 
break;
case 51: this.$ = [T.BIN_OP, '<', $$[$0-2], $$[$0]]; 
break;
case 52: this.$ = [T.BIN_OP, '<=', $$[$0-2], $$[$0]]; 
break;
case 53: this.$ = [T.BIN_OP, '>', $$[$0-2], $$[$0]]; 
break;
case 54: this.$ = [T.BIN_OP, '>=', $$[$0-2], $$[$0]]; 
break;
case 55: this.$ = [T.BIN_OP, '==', $$[$0-2], $$[$0]]; 
break;
case 56: this.$ = [T.BIN_OP, '!=', $$[$0-2], $$[$0]]; 
break;
case 57: this.$ = [T.BIN_OP, '&', $$[$0-2], $$[$0]]; 
break;
case 58: this.$ = [T.BIN_OP, '*', $$[$0-2], $$[$0]]; 
break;
case 59: this.$ = [T.BIN_OP, '/', $$[$0-2], $$[$0]]; 
break;
case 60: this.$ = [T.BIN_OP, '%', $$[$0-2], $$[$0]]; 
break;
case 61: this.$ = [T.BIN_OP, '**', $$[$0-2], $$[$0]]; 
break;
case 62: this.$ = [T.BIN_OP, '^', $$[$0-2], $$[$0]]; 
break;
case 63: this.$ = [T.BIN_OP, '|', $$[$0-2], $$[$0]]; 
break;
case 64: this.$ = [T.BIN_OP, '&&', $$[$0-2], $$[$0]]; 
break;
case 65: this.$ = [T.BIN_OP, '||', $$[$0-2], $$[$0]]; 
break;
case 66: this.$ = [T.BIN_OP, '=', $$[$0-2], $$[$0]]; 
break;
case 70: this.$ = [T.WAIT, $$[$0]]; 
break;
case 71: this.$ = $$[$0-1]; 
break;
case 72: this.$ = [T.GLOBAL_IDENT, yytext]; 
break;
case 73: this.$ = [T.IDENT, yytext]; 
break;
case 87: this.$ = [T.LAMBDA, $$[$0-2], $$[$0-1]]; 
break;
case 88: this.$ = [T.LAMBDA, [], $$[$0-1]]; 
break;
case 90: this.$ = [$$[$0]]; 
break;
case 91: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
}
},
table: [{3:1,4:2,6:3,7:[1,4],8:[1,5]},{1:[3]},{5:[1,6]},{5:[2,4],9:7,10:8,11:9,12:12,13:10,14:11,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:[1,20],25:[2,4],26:[1,21],27:[1,22],28:[1,23],31:[1,33],33:[1,24],38:[1,25],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{5:[2,2],22:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],31:[2,2],33:[2,2],38:[2,2],41:[2,2],42:[2,2],72:[2,2],73:[2,2],74:[2,2],75:[2,2],76:[2,2],77:[2,2],78:[2,2],79:[2,2],80:[2,2],81:[2,2],82:[2,2],83:[2,2],84:[2,2],85:[2,2]},{5:[2,3],22:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],31:[2,3],33:[2,3],38:[2,3],41:[2,3],42:[2,3],72:[2,3],73:[2,3],74:[2,3],75:[2,3],76:[2,3],77:[2,3],78:[2,3],79:[2,3],80:[2,3],81:[2,3],82:[2,3],83:[2,3],84:[2,3],85:[2,3]},{1:[2,1]},{5:[2,5],25:[2,5]},{5:[2,6],25:[2,6]},{5:[2,7],10:47,12:48,13:10,14:11,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:[1,20],25:[2,7],26:[1,21],27:[1,22],28:[1,23],31:[1,33],33:[1,24],38:[1,25],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{5:[2,13],6:49,7:[1,4],8:[1,5],25:[2,13]},{5:[2,14],6:50,7:[1,4],8:[1,5],25:[2,14]},{5:[2,9],22:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],31:[2,9],33:[2,9],38:[2,9],41:[2,9],42:[2,9],72:[2,9],73:[2,9],74:[2,9],75:[2,9],76:[2,9],77:[2,9],78:[2,9],79:[2,9],80:[2,9],81:[2,9],82:[2,9],83:[2,9],84:[2,9],85:[2,9]},{5:[2,15],7:[2,15],8:[2,15],25:[2,15]},{5:[2,16],7:[2,16],8:[2,16],25:[2,16]},{5:[2,17],7:[2,17],8:[2,17],25:[2,17]},{5:[2,18],7:[2,18],8:[2,18],25:[2,18]},{5:[2,19],7:[2,19],8:[2,19],25:[2,19]},{5:[2,20],7:[2,20],8:[2,20],25:[2,20]},{5:[2,21],7:[2,21],8:[2,21],25:[2,21],46:[1,70],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[1,69]},{5:[2,22],7:[2,22],8:[2,22],25:[2,22]},{21:71,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{8:[1,72],26:[1,73]},{29:74,31:[1,75]},{21:76,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{31:[1,79],39:77,41:[1,78]},{5:[2,67],7:[2,67],8:[2,67],25:[2,67],43:[2,67],46:[2,67],50:[2,67],51:[2,67],52:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],64:[2,67],65:[2,67],66:[2,67],67:[2,67],68:[2,67]},{5:[2,68],7:[2,68],8:[2,68],25:[2,68],43:[2,68],46:[2,68],50:[2,68],51:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],65:[2,68],66:[2,68],67:[2,68],68:[2,68]},{5:[2,69],7:[2,69],8:[2,69],25:[2,69],43:[2,69],46:[2,69],50:[2,69],51:[2,69],52:[2,69],53:[2,69],54:[2,69],55:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69]},{21:80,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:81,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{5:[2,72],7:[2,72],8:[2,72],25:[2,72],43:[2,72],46:[2,72],50:[2,72],51:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],64:[2,72],65:[2,72],66:[2,72],67:[2,72],68:[2,72]},{5:[2,73],7:[2,73],8:[2,73],25:[2,73],43:[2,73],46:[2,73],50:[2,73],51:[2,73],52:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],67:[2,73],68:[2,73]},{5:[2,74],7:[2,74],8:[2,74],25:[2,74],43:[2,74],46:[2,74],50:[2,74],51:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],67:[2,74],68:[2,74]},{5:[2,75],7:[2,75],8:[2,75],25:[2,75],43:[2,75],46:[2,75],50:[2,75],51:[2,75],52:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],65:[2,75],66:[2,75],67:[2,75],68:[2,75]},{5:[2,76],7:[2,76],8:[2,76],25:[2,76],43:[2,76],46:[2,76],50:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[2,76],66:[2,76],67:[2,76],68:[2,76]},{5:[2,77],7:[2,77],8:[2,77],25:[2,77],43:[2,77],46:[2,77],50:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[2,77],66:[2,77],67:[2,77],68:[2,77]},{4:83,6:3,7:[1,4],8:[1,5],31:[1,85],86:82,87:84},{5:[2,78],7:[2,78],8:[2,78],25:[2,78],32:[2,78],43:[2,78],46:[2,78],50:[2,78],51:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],65:[2,78],66:[2,78],67:[2,78],68:[2,78]},{5:[2,79],7:[2,79],8:[2,79],25:[2,79],32:[2,79],43:[2,79],46:[2,79],50:[2,79],51:[2,79],52:[2,79],53:[2,79],54:[2,79],55:[2,79],56:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[2,79],67:[2,79],68:[2,79]},{5:[2,80],7:[2,80],8:[2,80],25:[2,80],32:[2,80],43:[2,80],46:[2,80],50:[2,80],51:[2,80],52:[2,80],53:[2,80],54:[2,80],55:[2,80],56:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],67:[2,80],68:[2,80]},{5:[2,81],7:[2,81],8:[2,81],25:[2,81],32:[2,81],43:[2,81],46:[2,81],50:[2,81],51:[2,81],52:[2,81],53:[2,81],54:[2,81],55:[2,81],56:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],65:[2,81],66:[2,81],67:[2,81],68:[2,81]},{5:[2,82],7:[2,82],8:[2,82],25:[2,82],32:[2,82],43:[2,82],46:[2,82],50:[2,82],51:[2,82],52:[2,82],53:[2,82],54:[2,82],55:[2,82],56:[2,82],57:[2,82],58:[2,82],59:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],64:[2,82],65:[2,82],66:[2,82],67:[2,82],68:[2,82]},{5:[2,83],7:[2,83],8:[2,83],25:[2,83],32:[2,83],43:[2,83],46:[2,83],50:[2,83],51:[2,83],52:[2,83],53:[2,83],54:[2,83],55:[2,83],56:[2,83],57:[2,83],58:[2,83],59:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],64:[2,83],65:[2,83],66:[2,83],67:[2,83],68:[2,83]},{5:[2,84],7:[2,84],8:[2,84],25:[2,84],32:[2,84],43:[2,84],46:[2,84],50:[2,84],51:[2,84],52:[2,84],53:[2,84],54:[2,84],55:[2,84],56:[2,84],57:[2,84],58:[2,84],59:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],64:[2,84],65:[2,84],66:[2,84],67:[2,84],68:[2,84]},{5:[2,85],7:[2,85],8:[2,85],25:[2,85],32:[2,85],43:[2,85],46:[2,85],50:[2,85],51:[2,85],52:[2,85],53:[2,85],54:[2,85],55:[2,85],56:[2,85],57:[2,85],58:[2,85],59:[2,85],60:[2,85],61:[2,85],62:[2,85],63:[2,85],64:[2,85],65:[2,85],66:[2,85],67:[2,85],68:[2,85]},{5:[2,86],7:[2,86],8:[2,86],25:[2,86],32:[2,86],43:[2,86],46:[2,86],50:[2,86],51:[2,86],52:[2,86],53:[2,86],54:[2,86],55:[2,86],56:[2,86],57:[2,86],58:[2,86],59:[2,86],60:[2,86],61:[2,86],62:[2,86],63:[2,86],64:[2,86],65:[2,86],66:[2,86],67:[2,86],68:[2,86]},{5:[2,8],25:[2,8]},{5:[2,10],22:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],31:[2,10],33:[2,10],38:[2,10],41:[2,10],42:[2,10],72:[2,10],73:[2,10],74:[2,10],75:[2,10],76:[2,10],77:[2,10],78:[2,10],79:[2,10],80:[2,10],81:[2,10],82:[2,10],83:[2,10],84:[2,10],85:[2,10]},{5:[2,11],22:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],31:[2,11],33:[2,11],38:[2,11],41:[2,11],42:[2,11],72:[2,11],73:[2,11],74:[2,11],75:[2,11],76:[2,11],77:[2,11],78:[2,11],79:[2,11],80:[2,11],81:[2,11],82:[2,11],83:[2,11],84:[2,11],85:[2,11]},{5:[2,12],22:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],31:[2,12],33:[2,12],38:[2,12],41:[2,12],42:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12],76:[2,12],77:[2,12],78:[2,12],79:[2,12],80:[2,12],81:[2,12],82:[2,12],83:[2,12],84:[2,12],85:[2,12]},{21:86,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:87,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:88,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:89,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:90,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:91,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:92,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:93,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:94,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:95,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:96,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:97,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:98,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:99,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:100,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:101,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:102,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:103,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:104,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{21:105,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{8:[1,106],46:[1,70],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[1,69]},{23:107,24:[1,108]},{21:109,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{30:[1,110]},{30:[2,29],32:[1,111]},{8:[1,112],46:[1,70],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[1,69]},{8:[1,114],40:113,42:[1,115]},{8:[2,37],42:[2,37]},{8:[2,38],42:[2,38]},{5:[2,70],7:[2,70],8:[2,70],25:[2,70],43:[2,70],46:[2,70],50:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70]},{43:[1,116],46:[1,70],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[1,69]},{4:117,6:3,7:[1,4],8:[1,5]},{25:[1,118]},{32:[1,120],66:[1,119]},{32:[2,90],66:[2,90]},{5:[2,47],7:[2,47],8:[2,47],25:[2,47],43:[2,47],46:[2,47],50:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,47],66:[2,47],67:[2,47],68:[2,47]},{5:[2,48],7:[2,48],8:[2,48],25:[2,48],43:[2,48],46:[2,48],50:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,48],66:[2,48],67:[2,48],68:[2,48]},{5:[2,49],7:[2,49],8:[2,49],25:[2,49],43:[2,49],46:[2,49],50:[1,51],51:[1,52],52:[2,49],53:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,49],66:[2,49],67:[2,49],68:[2,49]},{5:[2,50],7:[2,50],8:[2,50],25:[2,50],43:[2,50],46:[2,50],50:[1,51],51:[1,52],52:[2,50],53:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,50],66:[2,50],67:[2,50],68:[2,50]},{5:[2,51],7:[2,51],8:[2,51],25:[2,51],43:[2,51],46:[2,51],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,51],66:[2,51],67:[2,51],68:[2,51]},{5:[2,52],7:[2,52],8:[2,52],25:[2,52],43:[2,52],46:[2,52],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,52],66:[2,52],67:[2,52],68:[2,52]},{5:[2,53],7:[2,53],8:[2,53],25:[2,53],43:[2,53],46:[2,53],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,53],66:[2,53],67:[2,53],68:[2,53]},{5:[2,54],7:[2,54],8:[2,54],25:[2,54],43:[2,54],46:[2,54],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,54],66:[2,54],67:[2,54],68:[2,54]},{5:[2,55],7:[2,55],8:[2,55],25:[2,55],43:[2,55],46:[2,55],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[2,55],59:[2,55],60:[2,55],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,55],66:[2,55],67:[2,55],68:[2,55]},{5:[2,56],7:[2,56],8:[2,56],25:[2,56],43:[2,56],46:[2,56],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[2,56],59:[2,56],60:[2,56],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,56],66:[2,56],67:[2,56],68:[2,56]},{5:[2,57],7:[2,57],8:[2,57],25:[2,57],43:[2,57],46:[2,57],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[2,57],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,57],66:[2,57],67:[2,57],68:[2,57]},{5:[2,58],7:[2,58],8:[2,58],25:[2,58],43:[2,58],46:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],68:[2,58]},{5:[2,59],7:[2,59],8:[2,59],25:[2,59],43:[2,59],46:[2,59],50:[2,59],51:[2,59],52:[2,59],53:[2,59],54:[2,59],55:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],68:[2,59]},{5:[2,60],7:[2,60],8:[2,60],25:[2,60],43:[2,60],46:[2,60],50:[2,60],51:[2,60],52:[2,60],53:[2,60],54:[2,60],55:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60]},{5:[2,61],7:[2,61],8:[2,61],25:[2,61],43:[2,61],46:[2,61],50:[2,61],51:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[2,61]},{5:[2,62],7:[2,62],8:[2,62],25:[2,62],43:[2,62],46:[2,62],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[2,62],66:[2,62],67:[2,62],68:[2,62]},{5:[2,63],7:[2,63],8:[2,63],25:[2,63],43:[2,63],46:[2,63],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[2,63],67:[2,63],68:[2,63]},{5:[2,64],7:[2,64],8:[2,64],25:[2,64],43:[2,64],46:[2,64],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[2,64],68:[2,64]},{5:[2,65],7:[2,65],8:[2,65],25:[2,65],43:[2,65],46:[2,65],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[2,65]},{5:[2,66],7:[2,66],8:[2,66],25:[2,66],43:[2,66],46:[1,70],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[1,69]},{23:121,24:[1,108]},{5:[2,25],7:[2,25],8:[2,25],25:[2,25]},{4:122,6:3,7:[1,4],8:[1,5]},{8:[1,123],46:[1,70],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[1,69]},{21:124,31:[1,33],41:[1,32],42:[1,30],47:36,69:26,70:27,71:28,72:[1,29],73:[1,31],74:[1,34],75:[1,35],76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46],85:[1,37]},{31:[1,125]},{23:126,24:[1,108]},{8:[1,127]},{23:128,24:[1,108]},{31:[1,132],43:[1,129],44:130,45:131},{5:[2,71],7:[2,71],8:[2,71],25:[2,71],43:[2,71],46:[2,71],50:[2,71],51:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[2,71],65:[2,71],66:[2,71],67:[2,71],68:[2,71]},{25:[1,133]},{5:[2,88],7:[2,88],8:[2,88],25:[2,88],43:[2,88],46:[2,88],50:[2,88],51:[2,88],52:[2,88],53:[2,88],54:[2,88],55:[2,88],56:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88],61:[2,88],62:[2,88],63:[2,88],64:[2,88],65:[2,88],66:[2,88],67:[2,88],68:[2,88]},{7:[2,89],8:[2,89]},{31:[1,134]},{5:[2,24],7:[2,24],8:[2,24],25:[2,24]},{25:[1,135]},{23:136,24:[1,108]},{8:[1,137],46:[1,70],50:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:[1,59],59:[1,60],60:[1,61],61:[1,62],62:[1,63],63:[1,64],64:[1,65],65:[1,66],66:[1,67],67:[1,68],68:[1,69]},{30:[2,28]},{34:138,36:139,37:[1,140]},{23:141,24:[1,108]},{5:[2,36],7:[2,36],8:[2,36],25:[2,36]},{8:[2,39]},{32:[1,143],43:[1,142]},{32:[2,41],43:[2,41]},{32:[2,44],43:[2,44],46:[1,144]},{5:[2,87],7:[2,87],8:[2,87],25:[2,87],43:[2,87],46:[2,87],50:[2,87],51:[2,87],52:[2,87],53:[2,87],54:[2,87],55:[2,87],56:[2,87],57:[2,87],58:[2,87],59:[2,87],60:[2,87],61:[2,87],62:[2,87],63:[2,87],64:[2,87],65:[2,87],66:[2,87],67:[2,87],68:[2,87]},{32:[2,91],66:[2,91]},{5:[2,23],7:[2,23],8:[2,23],25:[2,23],37:[2,23]},{5:[2,26],7:[2,26],8:[2,26],25:[2,26]},{23:145,24:[1,108]},{35:146,36:147,37:[1,148]},{37:[2,31]},{33:[1,149]},{5:[2,35],7:[2,35],8:[2,35],25:[2,35]},{8:[2,40]},{31:[1,132],45:150},{47:151,76:[1,38],77:[1,39],78:[1,40],79:[1,41],80:[1,42],81:[1,43],82:[1,44],83:[1,45],84:[1,46]},{5:[2,27],7:[2,27],8:[2,27],25:[2,27]},{5:[2,30],7:[2,30],8:[2,30],25:[2,30]},{37:[2,32]},{8:[1,152],33:[1,149]},{8:[1,153]},{32:[2,42],43:[2,42]},{32:[2,43],43:[2,43]},{23:154,24:[1,108]},{23:155,24:[1,108]},{5:[2,34],7:[2,34],8:[2,34],25:[2,34]},{37:[2,33]}],
defaultActions: {6:[2,1],125:[2,28],129:[2,39],139:[2,31],142:[2,40],147:[2,32],155:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'COMPOSE';
break;
case 1:return 8;
break;
case 2:/* skip whitespace */
break;
case 3:return 84;
break;
case 4:return 76;
break;
case 5:return 76;
break;
case 6:return 77;
break;
case 7:return 78;
break;
case 8:return 79;
break;
case 9:return 80;
break;
case 10:return 81;
break;
case 11:return 38;
break;
case 12:return 26;
break;
case 13:return 27;
break;
case 14:return 28;
break;
case 15:return 30;
break;
case 16:return 22;
break;
case 17:return 'SPAWN';
break;
case 18:return 72;
break;
case 19:return 82;
break;
case 20:return 83;
break;
case 21:return 75;
break;
case 22:return 33;
break;
case 23:return 37;
break;
case 24:return 49;
break;
case 25:return 41;
break;
case 26:return 31;
break;
case 27:return 73;
break;
case 28:return 74;
break;
case 29:return 85;
break;
case 30:return 24;
break;
case 31:return 25;
break;
case 32:return 42;
break;
case 33:return 43;
break;
case 34:return '[';
break;
case 35:return ']';
break;
case 36:return 'PARTIAL';
break;
case 37:return 58;
break;
case 38:return 59;
break;
case 39:return 54;
break;
case 40:return 55;
break;
case 41:return 56;
break;
case 42:return 57;
break;
case 43:return 46;
break;
case 44:return 64;
break;
case 45:return 61;
break;
case 46:return 62;
break;
case 47:return 50;
break;
case 48:return 51;
break;
case 49:return 65;
break;
case 50:return 63;
break;
case 51:return 52;
break;
case 52:return 53;
break;
case 53:return 67;
break;
case 54:return 68;
break;
case 55:return 60;
break;
case 56:return 66;
break;
case 57:return '!';
break;
case 58:return '~';
break;
case 59:return 7;
break;
case 60:return 32;
break;
case 61:return '.';
break;
case 62:return 5;
break;
}
},
rules: [/^(?: +\. +)/,/^(?:(\r?\n|\r))/,/^(?:\s+)/,/^(?:"(\\[\\"rnt]|[^\\"])*")/,/^(?:#[0-9a-fA-F]{6})/,/^(?:#[0-9a-fA-F]{8})/,/^(?:#[a-zA-Z_]+)/,/^(?:0b[01][01_]+)/,/^(?:0x[0-9a-fA-F][0-9a-fA-F_]+)/,/^(?:[0-9][0-9_]+\.[0-9][0-9_]+)/,/^(?:[0-9][0-9_]+)/,/^(?:def\b)/,/^(?:while\b)/,/^(?:loop\b)/,/^(?:foreach\b)/,/^(?:in\b)/,/^(?:yield\b)/,/^(?:spawn\b)/,/^(?:wait\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:trace\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*[\!\?])/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:\$[a-zA-Z0-9_]+)/,/^(?:\$)/,/^(?:\.\{)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:\^)/,/^(?:%)/,/^(?:<<)/,/^(?:>>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:~)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}